{% if env_collection.has_active_deployments %}

# Get available zones in the region
data "google_compute_zones" "available" {
  region = "{{ env_collection.region }}"
  status = "UP"
}

locals {
  desired_machine_types = [
    "{{ env_collection.bastion_instance_type }}",
    "f1-micro",
    "e2-micro",
    "e2-small",
    "g1-small"
  ]
  selected_zone = data.google_compute_zones.available.names[0]
}

# This null_resource will try to find an available machine type
resource "null_resource" "machine_type_finder" {
  triggers = {
    desired_machine_types = join(",", local.desired_machine_types)
  }

  provisioner "local-exec" {
    command = <<-EOT
      #!/bin/bash
      IFS=',' read -ra TYPES <<< "${self.triggers.desired_machine_types}"
      for type in "$${TYPES[@]}"; do
        if gcloud compute machine-types describe "$type" --zone="${local.selected_zone}" &>/dev/null; then
          echo "$type" > ${path.module}/selected_machine_type.txt
          exit 0
        fi
      done
      echo "No valid machine type found" >&2
      exit 1
    EOT
  }
}

# Read the selected machine type from the file
data "local_file" "selected_machine_type" {
  filename = "${path.module}/selected_machine_type.txt"
  depends_on = [null_resource.machine_type_finder]
}

# Instance resource
resource "google_compute_instance" "{{ env_collection.instance_name }}-bastion" {
  name         = "{{ env_collection.instance_name }}-bastion"
  machine_type = trimspace(data.local_file.selected_machine_type.content)
  zone         = local.selected_zone

  allow_stopping_for_update = true
  deletion_protection       = false
  tags                      = ["bastion"]

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  network_interface {
    network    = google_compute_network.app-network.id
    subnetwork = "{{ env_collection.instance_name }}"
    access_config {
      // Ephemeral public IP
    }
  }

  depends_on = [google_compute_network.app-network, null_resource.machine_type_finder]
}

# Outputs for visibility
output "bastion_machine_type" {
  description = "Machine type of the bastion host"
  value       = google_compute_instance.{{ env_collection.instance_name }}-bastion.machine_type
}

output "bastion_zone" {
  description = "Zone of the bastion host"
  value       = google_compute_instance.{{ env_collection.instance_name }}-bastion.zone
}

resource "google_project_iam_member" "project-app-ssh-bastion" {
  project = "{{ env_collection.account_id }}"
  role    = "roles/compute.instanceAdmin.v1"
  member  = "serviceAccount:${google_service_account.{{ env_collection.instance_name }}.email}"
  depends_on = [google_project_service.iam, google_compute_instance.{{ env_collection.instance_name }}-bastion]
}

resource "google_compute_firewall" "rules" {
  project     = "{{ env_collection.account_id }}"
  name        = "bastion-{{ env_collection.instance_name }}"
  network     = google_compute_network.app-network.id
  description = "Allow ssh to bastion for {{ env_collection.instance_name }}"

  allow {
    protocol  = "tcp"
    ports     = ["22"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags = ["bastion"]
}

{% endif %}{# if env_collection.has_active_deployments #}

