{% for environment in env_collection.active_environments %}
  {% for resource in environment.database_resources %}
    {% if resource.is_database %}

      # Banco de Dados: {{ resource.instance_name }}

      {% if not resource.settings.use_existing %}

        resource "aws_secretsmanager_secret" "{{ resource.instance_name }}_db_creds" {
          name = "{{ resource.settings.database_credentials_secret_id }}"
          {% if environment.is_preview %}
          recovery_window_in_days = 0
          {% endif %}
        }

        resource "aws_secretsmanager_secret_version" "{{ resource.instance_name }}_db_creds" {
          secret_id     = aws_secretsmanager_secret.{{ resource.instance_name }}_db_creds.id
          secret_string = jsonencode({
            username = "{{ resource.settings.username }}"
            password = "{{ resource.settings.database_password }}"
          })
        }

        {% if environment.active_deployment %}
        resource "aws_db_instance" "{{ resource.instance_name }}" {
          identifier              = "{{ resource.settings.identifier }}"
          allocated_storage       = "20"
          engine                  = "{{ resource.settings.engine }}"
          instance_class          = "{{ resource.settings.instance_class }}"
          multi_az                = false
          publicly_accessible     = {% if resource.settings.public %} true {% else %} false {% endif %}
          engine_version          = "{{ resource.settings.version }}"
          username                = "{{ resource.settings.username }}"
          password                = "{{ resource.settings.database_password }}"
          {% if not resource.settings.public %}
          db_subnet_group_name    = aws_db_subnet_group.{{ resource.instance_name }}.id
          {% endif %}
          vpc_security_group_ids  = [aws_security_group.{{ resource.instance_name }}_db.id]
          skip_final_snapshot     = true
          allow_major_version_upgrade = true
          storage_encrypted       = true

          {%- if resource.settings.db_name %}
          db_name = "{{ resource.settings.db_name }}"
          {%- endif %}

          {%- if resource.settings.license_model %}
          license_model = "license-included"
          {% endif %}

          {%- if not resource.settings.minor_version_specified %}
          auto_minor_version_upgrade  = false
          {%- endif %}

          {%- if environment.is_static %}
          deletion_protection = true
          {%- endif %}

          provisioner "local-exec" {
            command = "sleep 60"
          }

          lifecycle {
            ignore_changes = [allocated_storage, instance_class]
          }
        }
        {% endif %}
      {% else %}

        data "aws_secretsmanager_secret" "{{ resource.instance_name }}_db_creds" {
          name = "{{ resource.settings.use_existing.secret_id }}"
        }

        {% if not resource.settings.use_existing.cluster_mode %}
        data "aws_db_instance" "{{ resource.instance_name }}" {
          db_instance_identifier = "{{ resource.settings.identifier }}"
        }
        {% elif not resource.settings.use_db_proxy %}
        data "aws_rds_cluster" "{{ resource.instance_name }}" {
          cluster_identifier = "{{ resource.settings.identifier }}"
        }
        {% endif %}

      {% endif %}

      {% if environment.active_deployment %}

      output "{{ resource.settings.host_output_id }}" {
        value = "{{ resource.settings.host_output_tf_value_string }}"
      }

      {% if resource.settings.use_db_proxy %}
      # Configurações adicionais para DB Proxy (se aplicável)
      # (Código para o DB Proxy aqui)
      {% endif %}

      {% endif %}  # Fim de environment.active_deployment

      {% if not resource.settings.public %}

      resource "aws_db_subnet_group" "{{ resource.instance_name }}" {
        name        = "{{ resource.instance_name }}"
        description = "RDS subnet group"
        subnet_ids  = [
          {% if environment.vpc is defined and environment.vpc.create_vpc %}
            {% for i in range(environment.vpc.private_subnets | length) %}
              aws_subnet.{{ environment.collection.instance_name }}_private[{{ i }}].id{{ "," if not loop.last }}
            {% endfor %}
          {% else %}
            {% for id in data.aws_subnet_ids.{{ environment.collection.instance_name }}_private.ids %}
              "{{ id }}"{{ "," if not loop.last }}
            {% endfor %}
          {% endif %}
        ]
      }

      {% endif %}  # Fim de not resource.settings.public

      resource "aws_security_group" "{{ resource.instance_name }}_db_access" {
        {% if environment.vpc is defined and environment.vpc.create_vpc %}
        vpc_id = aws_vpc.{{ environment.collection.instance_name }}.id
        {% elif environment.vpc is defined %}
        vpc_id = data.aws_vpc.{{ environment.collection.instance_name }}.id
        {% else %}
        vpc_id = "{{ environment.vpc_id }}"
        {% endif %}
        name        = "{{ resource.instance_name }}-db-access"
        description = "Allow access to RDS"
      }

      resource "aws_security_group" "{{ resource.instance_name }}_db" {
        {% if environment.vpc is defined and environment.vpc.create_vpc %}
        vpc_id = aws_vpc.{{ environment.collection.instance_name }}.id
        {% elif environment.vpc is defined %}
        vpc_id = data.aws_vpc.{{ environment.collection.instance_name }}.id
        {% else %}
        vpc_id = "{{ environment.vpc_id }}"
        {% endif %}
        name        = "{{ resource.instance_name }}-db"
        description = "RDS Security Group"

        # Permitir tráfego interno
        ingress {
          from_port   = 0
          to_port     = 0
          protocol    = "-1"
          self        = true
        }

        # Regras de ingresso com base no tipo de banco de dados
        {% if resource.settings.engine == "mysql" %}
        ingress {
          from_port       = 3306
          to_port         = 3306
          protocol        = "tcp"
          security_groups = [aws_security_group.{{ resource.instance_name }}_db_access.id]
        }
        {% elif resource.settings.engine == "sqlserver" %}
        ingress {
          from_port       = 1433
          to_port         = 1433
          protocol        = "tcp"
          security_groups = [aws_security_group.{{ resource.instance_name }}_db_access.id]
        }
        {% elif resource.settings.engine == "postgres" %}
        ingress {
          from_port       = 5432
          to_port         = 5432
          protocol        = "tcp"
          security_groups = [aws_security_group.{{ resource.instance_name }}_db_access.id]
        }
        {% endif %}

        # Acesso público, se aplicável
        {% if resource.settings.public %}
        ingress {
          from_port   = {% if resource.settings.engine == "mysql" %}3306{% elif resource.settings.engine == "sqlserver" %}1433{% elif resource.settings.engine == "postgres" %}5432{% endif %}
          to_port     = {% if resource.settings.engine == "mysql" %}3306{% elif resource.settings.engine == "sqlserver" %}1433{% elif resource.settings.engine == "postgres" %}5432{% endif %}
          protocol    = "tcp"
          cidr_blocks = ["0.0.0.0/0"]
        }
        {% endif %}

        # Saída para a Internet
        egress {
          from_port   = 0
          to_port     = 0
          protocol    = "-1"
          cidr_blocks = ["0.0.0.0/0"]
        }
      }

    {% endif %}  {# Fim de resource.is_database #}
  {% endfor %}  {# Fim do loop de resources #}
{% endfor %}  {# Fim do loop de environments #}
