#!/bin/bash

# Assigning variables
name_lambda="{{ service.instance_name }}"
output_dir="{{ service.environment.collection.config_files_path }}/build/{{ service.instance_name }}_lambda_function.zip"
region="{{ service.environment.collection.region }}"

# Validation echos
echo "Validating variables for service {{ service.instance_name }}..."
echo "name_lambda: $name_lambda"
echo "output_dir: $output_dir"
echo "region: $region"

env_vars_file="env_vars.json"
echo "Creating environment variables file $env_vars_file..."

# Start JSON file
echo '{ "Variables": {' > $env_vars_file

{% for item in service.insecure_environment_items %}
echo "  \"{{item.name}}\": \"{{item.value}}\"," >> $env_vars_file
{% endfor %}
sed -i '$ s/,$//' $env_vars_file

# Close JSON file
echo '}}' >> $env_vars_file

cat $env_vars_file

# Check if variables are set
if [ -z "$name_lambda" ] || [ -z "$output_dir" ] || [ -z "$region" ]; then
  echo "Error: One or more required variables are not set for service {{ service.instance_name }}."
  exit 1
fi

# Deploying lambda function using AWS CLI
echo "Deploying lambda function $name_lambda with ZIP file at $output_dir in region $region"

# Lambda deployment command using AWS CLI
aws lambda update-function-code --function-name "$name_lambda" --zip-file "fileb://$output_dir" --region "$region" --no-cli-pager

# Capturing the exit status of the aws command
exit_code=$?

# Checking the exit status of the aws command
if [ $exit_code -eq 0 ]; then
  echo "Lambda function $name_lambda updated successfully"
else
  echo "Error updating lambda function $name_lambda."
  exit $exit_code
fi

# Function to wait for the Lambda function to be in Active state
wait_for_active() {
  while true; do
    state=$(aws lambda get-function-configuration --function-name "$name_lambda" --region "$region" --query 'State' --output text)
    if [ "$state" == "Active" ]; then
      break
    fi
    echo "Waiting for lambda function $name_lambda to be Active..."
    sleep 3
  done
}

# Wait for the function to be active before updating environment variables
wait_for_active

# Backup the current environment variables
echo "Backing up current environment variables for lambda function $name_lambda"
current_env_vars=$(aws lambda get-function-configuration --function-name "$name_lambda" --region "$region" --query 'Environment' --output json)

# Updating the lambda function configuration to add environment variables
echo "Updating environment variables for lambda function $name_lambda"
aws lambda update-function-configuration --function-name "$name_lambda" --environment "file://$env_vars_file" --region "$region" --no-cli-pager

# Capturing the exit status of the aws command
exit_code=$?

# Checking the exit status of the aws command
if [ $exit_code -eq 0 ]; then
  echo "Environment variables for lambda function $name_lambda updated successfully"
else
  echo "Error updating environment variables for lambda function $name_lambda. Rolling back to previous environment variables."
  
  # Rollback to previous environment variables
  rollback_exit_code=0
  echo "$current_env_vars" > current_env_vars.json
  aws lambda update-function-configuration --function-name "$name_lambda" --environment "file://current_env_vars.json" --region "$region" --no-cli-pager || rollback_exit_code=$?

  if [ $rollback_exit_code -eq 0 ]; then
    echo "Rollback to previous environment variables successful."
  else
    echo "Error rolling back to previous environment variables. Manual intervention might be required."
  fi

  # Cleanup
  rm $env_vars_file
  rm current_env_vars.json

  exit $exit_code
fi

# Cleanup
rm $env_vars_file


# Exit with the captured exit code
exit $exit_code
