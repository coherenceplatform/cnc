{% for environment in env_collection.active_environments %}
{% for resource in environment.database_resources %}
{% if resource.is_database %}

resource "aws_db_subnet_group" "{{ resource.instance_name }}" {
    name = "{{ resource.instance_name }}"
    description = "RDS subnet group"
    subnet_ids = concat(aws_subnet.{{ environment.name }}_{{environment.collection.instance_name}}_private.*.id)
}

resource "aws_security_group" "{{ resource.instance_name }}_db_access" {
    vpc_id = aws_vpc.{{ environment.name }}_{{environment.collection.instance_name}}.id
    name = "{{ resource.instance_name }}-db-access"
    description = "Allow access to RDS"
}

resource "aws_security_group" "{{ resource.instance_name }}_db" {
    vpc_id = aws_vpc.{{ environment.name }}_{{environment.collection.instance_name}}.id
    name = "{{ resource.instance_name }}-db"
    description = "RDS Security Group"

    # Allow traffic from the SG
    ingress {
        from_port = 0
        to_port = 0
        protocol = "-1"
        self = true
    }

{% if has_mysql_db %}
    ingress {
        from_port = 3306
        to_port = 3306
        protocol = "tcp"
        security_groups = [aws_security_group.{{ resource.instance_name }}_db_access.id]
    }
{% endif %}

{% if has_mssql_db %}
    ingress {
        from_port = 1433
        to_port = 1433
        protocol = "tcp"
        security_groups = [aws_security_group.{{ resource.instance_name }}_db_access.id]
    }
{% endif %}

{% if has_postgres_db %}
    ingress {
        from_port = 5432
        to_port = 5432
        protocol = "tcp"
        security_groups = [aws_security_group.{{ resource.instance_name }}_db_access.id]
    }
{% endif %}

    # Outbound internet access
    egress {
        from_port = 0
        to_port = 0
        protocol = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }
}

resource "aws_db_instance" "{{ resource.instance_name }}" {
    identifier = "{{ resource.settings.identifier }}"
    allocated_storage = "20"
    engine = "{{ resource.settings.engine }}"
    instance_class = "{{ resource.settings.instance_class }}"
    multi_az = false
    engine_version = "{{ resource.settings.version }}"
    username = "{{ resource.settings.username }}"
    password = "{{ resource.settings.database_password }}"
    db_subnet_group_name = "${aws_db_subnet_group.{{ resource.instance_name }}.id}"
    vpc_security_group_ids = [aws_security_group.{{ resource.instance_name }}_db.id]
    skip_final_snapshot = true
    allow_major_version_upgrade = true
    storage_encrypted = true

    {%- if resource.settings.db_name %}
    db_name = "{{ resource.settings.db_name }}"
    {%- endif %}

    {%- if resource.settings.license_model %}
    license_model = "license-included"
    {% endif %}

    {%- if not resource.settings.minor_version_specified %}
    auto_minor_version_upgrade  = false
    {%- endif %}

    {%- if environment.is_static %}
    deletion_protection = true
    {%- endif %}

    provisioner "local-exec" {
        command = "sleep 60"
    }

    lifecycle {
        ignore_changes = [allocated_storage, instance_class]
    }
}
{% endif %}
{% endfor %}
{% endfor %}