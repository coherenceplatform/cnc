{% for environment in env_collection.active_environments %}
{% for service in environment.services %}
{% if service.is_serverless %}

################################################################################
# Security Group for Lambda
################################################################################
resource "aws_security_group" "{{ service.instance_name }}_lambda" {

  name        = join("-", [local.{{ service.instance_name }}_lambda_infrastructure_suffix, "lambda-sg"])
  vpc_id      = aws_vpc.{{ environment.name }}_{{environment.collection.instance_name}}.id

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [ var.{{ environment.name }}_{{environment.collection.instance_name}}_cidr ]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

################################################################################
# Lambda Function
################################################################################
resource "aws_lambda_function" "{{ service.instance_name }}" {
  
  function_name = local.{{ service.instance_name }}_lambda_infrastructure_suffix
  handler       = var.{{ service.instance_name }}_handler
  runtime       = var.{{ service.instance_name }}_runtime
  role          = aws_iam_role.{{ service.instance_name }}.arn

  filename      = "./lambda_function_payload.zip"
  source_code_hash = filebase64sha256("./lambda_function_payload.zip")

  lifecycle {
    ignore_changes = [ 
      source_code_hash,
      filename
      ]
  }

  dynamic "environment" {
    for_each = length(keys(var.{{ service.instance_name }}_lambda_variables)) == 0 ? [] : [true]
    content {
       variables = merge(
        var.{{ service.instance_name }}_lambda_variables
      )
    }
  }

  vpc_config {
    security_group_ids = [aws_security_group.{{ service.instance_name }}_lambda.id]
    subnet_ids = concat(
      aws_subnet.{{environment.name}}_{{environment.collection.instance_name}}_public[*].id,
      aws_subnet.{{environment.name}}_{{environment.collection.instance_name}}_private[*].id
    )
  }

  dynamic "logging_config" {
    for_each = can(regex("^[a-zA-Z0-9_\\-/#.]+$", local.{{ service.instance_name }}_lambda_log_group)) ? [true] : []
    content {
      log_group  = local.{{ service.instance_name }}_lambda_log_group
      log_format = "Text"
  }

  }
  depends_on = [ 
    aws_iam_role.{{ service.instance_name }},
  ]
}

{% endif %}
{% endfor %}
{% endfor %}