variable "name" {
  description = "Name to be used on all the resources as identifier"
  type        = string
  default     = "{{ env_collection.name | default('cnc') }}"
}

variable "environment" {
  description = "Environment to be used on all the resources as identifier"
  type        = string
  default = "dev"
}

variable "account_id" {
  description = "Environment to be used on all the resources as identifier"
  type        = string
  default = "{{ env_collection.account_id | default('null') }}"
}

variable "aws_resources_permission_lambda" {
  description = "List of AWS resources that the Lambda function needs to access"
  type        = list(string)
  default     = [ "logs", "cloudwatch"]
}

variable "lambda_function_name" {
  description = "Name of the Lambda function"
  type        = string
  default     = ""
}

variable "handler" {
    description = "Lambda function handler | e.g Format: filename.lambda_handler"
    type        = string
    default = "dynamodb.lambda_handler"
    # default     = ""
}

variable "runtime" {
    description = "Lambda function runtime"
    type        = string
    default     = "python3.12"
}

variable "environment_variables" {
  description = "Environment variables to pass to the Lambda function"
  type        = map(string)
  default     = {
  "REGION_NAME" = "us-east-2"
  }
}

variable "type_package_lambda_function" {
  description = "Method to package the Lambda function | Set [ 's3', 'filename', 'image' ]"
  type        = string
  default = "filename"
}

variable "s3_bucket_name" {
  description = "S3 bucket to store the Lambda function package" 
  type        = string
  default     = ""
}

variable "s3_object_key" {
  description = "S3 key to store the Lambda function package"
  type        = string
  default = "dynamodb.zip"
  # default = ""
}

variable "s3_bucket_notification_filter_suffix" {
  description = "The suffix to filter the S3 bucket notifications"
  type        = string
  default = ".zip"
}

variable "logging_log_format" {
  description = "Log format for the CloudWatch log group"
  type        = string
  default     = "Text"
}

variable "type_source_lambda_function" {
  description = "Source of the Lambda function | Set [ 'file', 'dir' ]"
  type        = string
  default     = "file"
}

variable "source_file" {
  description = "Path to the Lambda function package"
  type        = string
  default = "/home/balmant/Desktop/app-lambda-coherence/dynamodb.py"
  # default = ""
}

variable "source_dir" {
  description = "Path Dir to the Lambda function package"
  type        = string
  default = "./lambda-function/"
  # default = ""
}

variable "output_path" {
  description = "Output of the Lambda function"
  type        = string
  default = "/home/balmant/Desktop/app-output-lambda/dynamodb.zip"
  # default = ""
}

variable "image_uri" {
  description = "URI of the Lambda function image"
  type        = string
  default = ""
}

variable "table_name" {
  description = "The name of the DynamoDB table"
  type        = string
  default     = ""
}

variable "billing_mode" {
  description = "The billing mode for the DynamoDB table"
  type        = string
  default     = "PAY_PER_REQUEST"
}

variable "hash_key" {
  description = "The hash key for the DynamoDB table"
  type        = string
  default = "UserID"
}

variable "read_capacity" {
  description = "The read capacity for the DynamoDB table"
  type        = number
  default     = 5
}

variable "write_capacity" {
  description = "The write capacity for the DynamoDB table"
  type        = number
  default     = 5
}

variable "attributes" {
  description = "The attributes for the DynamoDB table"
  type = list(object({
    name = string
    type = string
  }))
  default = [ {
    name = "UserID"
    type = "S"
  } ]
}

variable "global_secondary_indexes" {
  description = "The global secondary indexes for the DynamoDB table"
  type        = list(object({
    name            = string
    hash_key        = string
    range_key       = string
    read_capacity   = number
    write_capacity  = number
    projection_type = string
  }))
  default     = []
}

variable "tags" {
  description = "A map of tags to assign to the resource"
  type        = map(string)
  default     = {}
}

variable "deletion_protection_enabled" {
  description = "Whether to enable deletion protection for the DynamoDB table"
  type        = bool
  default     = false
}

variable "table_class" {
  description = "The class of the DynamoDB table"
  type        = string
  default     = "STANDARD"
}

variable "point_in_time_recovery_enabled" {
  description = "Whether to enable point-in-time recovery for the DynamoDB table"
  type        = bool
  default     = false
}

variable "ttl_enabled" {
  description = "Whether to enable TTL for the DynamoDB table"
  type        = bool
  default     = false
}

variable "ttl_attribute_name" {
  description = "The name of the TTL attribute for the DynamoDB table"
  type        = string
  default     = ""
}