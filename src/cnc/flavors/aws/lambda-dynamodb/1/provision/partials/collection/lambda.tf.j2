locals {
  infrastructure_suffix = join ("-", [var.environment, var.name])

  default_bucket_name = join("-", [local.infrastructure_suffix, "lambda", var.account_id])
  s3_bucket_name = coalesce(var.s3_bucket_name, local.default_bucket_name)

  default_lambda_function_name = join("-", [local.infrastructure_suffix, "lambda"])
  lambda_function_name = coalesce(var.lambda_function_name, local.default_lambda_function_name)

  log_group = join("/", ["/aws/lambda", local.infrastructure_suffix])
}

data "aws_partition" "current" {}

################################################################################
# Data Archive File
################################################################################
data "archive_file" "file" {
  count = (var.type_package_lambda_function == "filename" || var.type_package_lambda_function == "s3") && var.type_source_lambda_function == "file" ? 1 : 0
  type        = "zip"
  source_file = var.source_file
  output_path = var.output_path
}

data "archive_file" "dir" {
  count = (var.type_package_lambda_function == "filename" || var.type_package_lambda_function == "s3") && var.type_source_lambda_function == "dir" ? 1 : 0
  type        = "zip"
  source_dir = var.source_dir
  output_path = var.output_path
}

################################################################################
# S3
################################################################################
resource "aws_s3_bucket" "bucket" {
  count = var.type_package_lambda_function == "s3" ? 1 : 0
  bucket = local.s3_bucket_name
}

resource "aws_s3_object" "object" {
  count = var.type_package_lambda_function == "s3" ? 1 : 0
  depends_on = [ aws_s3_bucket.bucket , data.archive_file.dir, data.archive_file.file ]
  bucket = aws_s3_bucket.bucket[0].id
  key    = var.s3_object_key
  source = var.output_path
}


################################################################################
# IAM Role | Role Policy for Lambda to access 
################################################################################
resource "aws_iam_role" "lambda_role" {
  name = join("-", [local.infrastructure_suffix,  "lambda"])

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action    = "sts:AssumeRole",
      Effect    = "Allow",
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_policy" "lambda_policy" {
  name        = join("-", [local.infrastructure_suffix, "lambda"])
  description = "IAM policy for Lambda to access specified AWS services"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      for resource in var.aws_resources_permission_lambda : {
        Action = [
          "${resource}:*"
        ],
        Effect   = "Allow",
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

################################################################################
# Lambda Function
################################################################################
resource "aws_lambda_function" "this" {

  function_name = local.lambda_function_name
  handler       = var.handler
  runtime       = var.runtime
  role          = aws_iam_role.lambda_role.arn

  s3_bucket = var.type_package_lambda_function == "s3" ? aws_s3_bucket.bucket[0].id : null
  s3_key    = var.type_package_lambda_function == "s3" ? var.s3_object_key : null
  filename      = var.type_package_lambda_function == "filename" ? var.output_path : null
  source_code_hash = var.type_package_lambda_function == "filename" ? filebase64sha256(var.output_path) : null
  image_uri = var.type_package_lambda_function == "image" ? var.image_uri : null
  
  dynamic "environment" {
    for_each = length(keys(var.environment_variables)) == 0 ? [] : [true]
    content {
      variables = var.environment_variables
    }
  }

  dynamic "logging_config" {
    for_each = can(regex("^[a-zA-Z0-9_\\-/#.]+$", local.log_group)) ? [true] : []
    content {
      log_group  = local.log_group
      log_format = var.logging_log_format
  }
}
  depends_on = [ 
    aws_s3_bucket.bucket, 
    aws_s3_object.object,
    aws_iam_role.lambda_role,
    data.archive_file.dir,
    data.archive_file.file
  ]
}

################################################################################
# S3 Bucket Notification
################################################################################
resource "aws_s3_bucket_notification" "bucket_notification" {
  count = var.type_package_lambda_function == "s3" ? 1 : 0
  bucket = aws_s3_bucket.bucket[0].id
  lambda_function {
    lambda_function_arn = aws_lambda_function.this.arn
    events              = ["s3:ObjectCreated:*"]
    filter_suffix = var.s3_bucket_notification_filter_suffix
  }

  depends_on = [ aws_s3_bucket.bucket, aws_lambda_function.this ]
}

################################################################################
# Lambda Permission
################################################################################
resource "aws_lambda_permission" "s3_permission" {
  statement_id  = "AllowS3Invoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.this.id
  principal     = "s3.amazonaws.com"
  source_arn    = aws_lambda_function.this.arn
  depends_on = [ aws_lambda_function.this ]
}

