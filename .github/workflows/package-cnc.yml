name: Package CNC

on:
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
          python3 -m pip install --upgrade build twine toml

    - name: Set package version and create artifact
      run: |
        PACKAGE_VERSION=${GITHUB_REF#refs/tags/}
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
        sed -i "s/^version = .*/version = \"$PACKAGE_VERSION\"/" pyproject.toml

    - name: Check if version already exists on PyPI
      run: |
        PACKAGE_NAME=cocnc
        PACKAGE_VERSION=${{ env.PACKAGE_VERSION }}
        VERSION_EXISTS=$(curl -s https://pypi.org/pypi/${PACKAGE_NAME}/json | python3 -c "import sys, json; data = json.load(sys.stdin); print('${PACKAGE_VERSION}' in data['releases'])")
        echo "VERSION_EXISTS=$VERSION_EXISTS" >> $GITHUB_ENV

    - name: Build the package
      if: env.VERSION_EXISTS == 'False'
      run: |
        python3 -m build

    - name: Publish to PyPI
      if: env.VERSION_EXISTS == 'False'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python3 -m twine upload dist/*

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      id: cache-docker-layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Google Cloud Registry
      uses: docker/login-action@v1
      with:
        registry: us-docker.pkg.dev
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}

    - name: Build base image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./cncbuilder/Dockerfile.base
        push: true
        tags: us-docker.pkg.dev/coherence-public/public/cnc_base:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
        
    - name: Build and push prod image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./cncbuilder/Dockerfile
        push: true
        tags: us-docker.pkg.dev/coherence-public/public/cnc:latest, us-docker.pkg.dev/coherence-public/public/cnc:${{ env.PACKAGE_VERSION }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
        build-args: CNC_VERSION=${{ env.PACKAGE_VERSION }}